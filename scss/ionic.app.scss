/*
To customize the look and feel of Ionic, you can override the variables
in ionic's _variables.scss file.

For example, you might change some of the default colors:

$light:                           #fff !default;
$stable:                          #f8f8f8 !default;
$positive:                        #387ef5 !default;
$calm:                            #11c1f3 !default;
$balanced:                        #33cd5f !default;
$energized:                       #ffc900 !default;
$assertive:                       #ef473a !default;
$royal:                           #886aea !default;
$dark:                            #444 !default;
*/

// The path for our ionicons font files, relative to the built CSS in www/css
$ionicons-font-path: "../lib/ionic/fonts" !default;

// Include all of Ionic
@import "../www/lib/ionic/scss/ionic";

// Include custom css //////////////////////////////////////////////////////////

/* when hiding the picture */
.ng-hide-add         { animation:0.5s lightSpeedOut ease; }

/* when showing the picture */
.ng-hide-remove      { animation:0.5s flipInX ease; }

.card .item {
  background-color: #F5F5F5;
}

ion-content {
  background-color: #FFF;
  background-image: url("../img/background.png");
  background-repeat: no-repeat;
  background-size:contain;
  background-position: bottom;
  margin:0 10px 0 10px;
}

.full-image {
  max-width: 500px;
}

.has-footer {
  bottom: 70px;
}

.question_title {
  text-transform: uppercase;
}

.videoWrapper {
  position: relative;
  padding-bottom: 56.25%; /* 16:9 */
  padding-top: 25px;
  height: 0;
}

.videoWrapper iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/* Styling an indeterminate progress bar */

progress:not(value) {
  /* Add your styles here. As part of this walkthrough we will focus only on determinate progress bars. */
}

/* Styling the determinate progress element */

progress[value] {
  /* Get rid of the default appearance */
  appearance: none;

  /* This unfortunately leaves a trail of border behind in Firefox and Opera. We can remove that by setting the border to none. */
  border: none;

  /* Add dimensions */
  width: 100%; height: 20px;

  /* Although firefox doesn't provide any additional pseudo class to style the progress element container, any style applied here works on the container. */
  background-color: whiteSmoke;
  border-radius: 3px;
  box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;

  /* Of all IE, only IE10 supports progress element that too partially. It only allows to change the background-color of the progress value using the 'color' attribute. */
  color: royalblue;

  position: relative;
  margin: 0 0 1.5em;
}

/*
Webkit browsers provide two pseudo classes that can be use to style HTML5 progress element.
-webkit-progress-bar -> To style the progress element container
-webkit-progress-value -> To style the progress element value.
*/

progress[value]::-webkit-progress-bar {
  background-color: whiteSmoke;
  border-radius: 3px;
  box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
}

progress[value]::-webkit-progress-value {
  position: relative;

  background-size: 35px 20px, 100% 100%, 100% 100%;
  border-radius:3px;

  /* Let's animate this */
  animation: animate-stripes 5s linear infinite;
}

@keyframes animate-stripes { 100% { background-position: -100px 0; } }

/* Let's spice up things little bit by using pseudo elements. */

progress[value]::-webkit-progress-value:after {
  /* Only webkit/blink browsers understand pseudo elements on pseudo classes. A rare phenomenon! */
  content: '';
  position: absolute;

  width:5px; height:5px;
  top:7px; right:7px;

  background-color: white;
  border-radius: 100%;
}

/* Firefox provides a single pseudo class to style the progress element value and not for container. -moz-progress-bar */
progress[value]::-moz-progress-bar {
  /* Gradient background with Stripes */
  background-image:
    -moz-linear-gradient( 135deg,
      transparent,
      transparent 33%,
      rgba(0,0,0,.1) 33%,
      rgba(0,0,0,.1) 66%,
      transparent 66%),
    -moz-linear-gradient( top,
      rgba(255, 255, 255, .25),
      rgba(0,0,0,.2)),
    -moz-linear-gradient( left, #09c, #f44);

  background-size: 35px 20px, 100% 100%, 100% 100%;
  border-radius:3px;

  /* Firefox doesn't support CSS3 keyframe animations on progress element. Hence, we did not include animate-stripes in this code block */
}

/* Fallback technique styles */
.progress-bar {
  background-color: whiteSmoke;
  border-radius: 3px;
  box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;

  /* Dimensions should be similar to the parent progress element. */
  width: 100%; height:20px;
}

.progress-bar span {
  background-color: royalblue;
  border-radius: 3px;

  display: block;
  text-indent: -9999px;
}

p[data-value] {
  position: relative;
}

/* The percentage will automatically fall in place as soon as we make the width fluid. Now making widths fluid. */

p[data-value]:after {
  content: attr(data-value) '%';
  position: absolute; right:0;
}

.node-js::-webkit-progress-value
{
  /* Gradient background with Stripes */
  background-image:
    -webkit-linear-gradient( 135deg,
      transparent,
      transparent 33%,
      rgba(0,0,0,.1) 33%,
      rgba(0,0,0,.1) 66%,
      transparent 66%),
    -webkit-linear-gradient( top,
      rgba(255, 255, 255, .25),
      rgba(0,0,0,.2)),
    -webkit-linear-gradient( left, #ef473a, #11c1f3);
}

.node-js::-moz-progress-bar {
  /* Gradient background with Stripes */
  background-image: -moz-linear-gradient(135deg,
    transparent,
    transparent 33%,
    rgba(0, 0, 0, .1) 33%,
    rgba(0, 0, 0, .1) 66%,
    transparent 66%),
  -moz-linear-gradient(top,
      rgba(255, 255, 255, .25),
      rgba(0, 0, 0, .2)),
  -webkit-linear-gradient( left, #ef473a, #11c1f3);
}
/* Now we are good to duplicate html code for other skills and then add the css code for the new skill based on data-skill */


/* THE END */
